from sklearn import preprocessing
import numpy as np

#Min-Max规范化：新数值=（原数值-极小值）/（极大值-极小值）
#将一列的数值代入上述公式中
#初始化数据,每一行表示一个样本，每一列表示一个特征
x = np.array([[ 0., -3., 1.],[ 3., 1., 2.],[ 0, 1., -1.]])
#将数据进行【0,1】规范化
min_max_scaler = preprocessing.MinMaxScaler()
print(min_max_scaler)
#MinMaxScaler(copy=True,feature_range=(0,1))
minmax_x = min_max_scaler.fit_transform(x)
print(minmax_x)


#Z-Score规范化：新数值=（原数值-均值）/标准差
#优点：易于比较结果；缺点：需要数据整体的平均值和方差
#数值符合均值为0，方差为1的正态分布
x = np.array([[ 0., -3., 1.],[ 3., 1., 2.],[ 0, 1., -1.]])
scaled_x = preprocessing.scale(x)
print(scaled_x)


#小数定标规范化:新数值=原数值/1000
#ceil函数是python中趋向于正无穷取整函数，利用对数取整得到要挪动的小数点位数
x = np.array([[ 0., -3., 1.],[ 3., 1., 2.],[ 0, 1., -1.]])
j = np.ceil(np.log10(np.max(abs(x))))
scaled_x = x/(10**j)
print(scaled_x)



#设属性income的最小值和最大值分别是5000元和58000元。利用Min-Max规范化的方法将属性的值映射到0至1的范围内，那么属性income的16000元将被转化为多少？
y = np.array([[5000.],[16000.],[58000.]])
min_max_y = preprocessing.MinMaxScaler().fit_transform(y)
print(min_max_y)
